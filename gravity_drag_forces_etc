mover[] james;
liquid juice;
PVector gravity, wind, friction;
float c, normal, fmag;
void setup() {
  background(0);
  size(800, 800);
  james = new mover[10];
  for (int i = 0; i < 10; i++) {
    james[i] = new mover(random(0.1, 10), random(100, 700), 100);
  }
  colorMode(HSB);
  juice = new liquid(0, height/2, width, height/2, 0.1);
}

void draw() {
    c = 0.01;
    normal = 1;
    fmag = c * normal;
    
    
  if (mousePressed) {
    wind = new PVector(0.5, 0);
    for (int i = 0; i < 10; i ++) {
   
    james[i].applyforce(wind);
    }
  }
  
  juice.show();
  for (int i = 0; i < 10; i ++) {
    friction = new PVector(james[i].velocity.x, james[i].velocity.y);
    friction.normalize();
    friction.mult(-1 * fmag * pow(james[i].velocity.mag(), 2));
    //james[i].applyforce(friction);
    gravity = new PVector(0, 0.1* james[i].mass);
    if (james[i].collision(juice) == true) {
      
      james[i].drag(juice);
    }
  james[i].applyforce(gravity);
  james[i].update();
  james[i].show();
  james[i].edges();
  }
  //background(0);
}
class mover {
  PVector location, velocity, acceleration, friction;
  float mass, c, normal, fmag;
  
  
  mover(float m, float x, float y) {
    location = new PVector(x,y);
    velocity = new PVector(0,0);
    acceleration = new PVector(0,0);
    mass = m;
    
  }
  
  void applyforce(PVector force) {
    PVector f = PVector.div(force, mass);
    acceleration.add(f);
    
    
  }
  void update() {
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
  }
  
  void edges() {
  if (location.x > width) {
    location.x = width;
    velocity.x *= -1;
  } else if (location.x < 0) {
    velocity.x *= -1;
    location.x = 0;
  }
  if (location.y > height) {
  velocity.y *= -1;
  location.y = height;
  }
}

boolean collision(liquid tjuice) {
  if (location.x > tjuice.x && location.x < tjuice.x + tjuice.w && location.y > tjuice.y && location.y < tjuice.y + tjuice.h) {
    return true;
  } else {
    return false;
    
  }
  
  
}
void drag(liquid tjuice) {
  PVector drag = velocity.get();
  drag.normalize();
  drag.mult(-1 * pow(velocity.mag(), 2) * tjuice.c);
  applyforce(drag);
}

  void show() {
    fill(map(mass, 0.1, 10, 1, 255), 255, 255, 20);
    ellipse(location.x, location.y, mass* 3, mass*3);
    
    
  }
}
class liquid {
  float x, y, w, h, c;
  
  liquid(float tx, float ty, float tw, float th, float tc) {
  x = tx;
  y = ty;
  w = tw;
  h = th;
  c = tc;
  }
  
  
  void show() {
    colorMode(HSB);
    noStroke();
    fill(120, 120, 120, 20);
    rect(x, y, w, h);
  }
}
